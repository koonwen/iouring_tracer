#!/usr/bin/env bpftrace
   /*
    * uring_multi_strace_summary

    *           Show uring syscall percentage per uring instance
    *
    * USAGE: uring_multi_strace_summary.bt
    *
    *
    * Copyright 2024 Tarides
    * Licensed under the Apache License, Version 2.0 (the "License")
    *
    * 23-April-2023	Lee Koon Wen	Created this.
    */

/* @start[uint64 tid] = (uint64 fd, uint64 ns) */
/* @rings[uint64 fd, string syscall] = uint64 ns_elapsed */

BEGIN {
    printf("[%lld] Tracing IO-uring... Hit Ctrl-C to end.\n\n", nsecs);
}

/* ===================== Syscall elapsed per ring ===================== */
tracepoint:syscalls:sys_enter_io_uring_setup {
    $name = "io_uring_setup";
    $start_t = nsecs;
    @start[tid] = ((uint64) 0, $start_t);
   }

tracepoint:syscalls:sys_exit_io_uring_setup {
    $name = "io_uring_setup";
    $elapsed  = nsecs - @start[tid].1;
    @rings[args->ret, $name] = stats($elapsed);
    delete(@start[tid]);
    printf("Ring instance initialized => fd: %d\n", args->ret);
   }

tracepoint:syscalls:sys_enter_io_uring_register {
    $name = "io_uring_register";
    $start_t = nsecs;
    @start[tid] = (args->fd, $start_t);
   }

tracepoint:syscalls:sys_exit_io_uring_register {
    $name = "io_uring_register";
    $elapsed  = nsecs - @start[tid].1;
    @rings[@start[tid].0, $name] = stats($elapsed);
    delete(@start[tid]);
   }

tracepoint:syscalls:sys_enter_io_uring_enter {
    $name = "io_uring_enter";
    $start_t = nsecs;
    @start[tid] = (args->fd, $start_t);
   }

tracepoint:syscalls:sys_exit_io_uring_enter {
    $name = "io_uring_enter";
    $elapsed  = nsecs - @start[tid].1;
    @rings[@start[tid].0, $name] = stats($elapsed);
    delete(@start[tid]);
   }


/* Bash command to group and sort final map */
/* awk -F'[][]' '{ print $2, $0 }' test.txt | sort -n | awk 'BEGIN {prev_num=-1} {if ($1 != prev_num) print ""; print $0; prev_num=$1}' */
