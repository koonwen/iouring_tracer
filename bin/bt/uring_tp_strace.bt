#!/usr/bin/env bpftrace
   /*
    * uring_tp_strace

    *           Show uring tracepoint strace-like log
    *           For Linux, uses bpftrace and eBPF.
    *
    * USAGE: uring_tp_strace.bt
    *
    *
    * Copyright 2024 Tarides
    * Licensed under the Apache License, Version 2.0 (the "License")
    *
    * 23-April-2023	Lee Koon Wen	Created this.
    */

/* @rings[int64 rint_ctx, string probe] = count */
BEGIN {
    printf("[%lld] Tracing IO-uring... Hit Ctrl-C to end.\n\n", nsecs);
   }

/* ====================INIT==================== */
tracepoint:io_uring:io_uring_create {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, fd %d sq size %d, cq size %d, flags 0x%x)\n",
           args->ctx,
           args->fd,
           args->sq_entries,
           args->cq_entries,
           args->flags)
        }

tracepoint:io_uring:io_uring_register {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, opcode %d, nr_user_files %d, nr_user_bufs %d, ret %ld)\n",
           args->ctx,
           args->opcode,
           args->nr_files,
           args->nr_bufs,
           args->ret)
        }

/* ============================================ */


/* ====================CTX-less==================== */

tracepoint:io_uring:io_uring_task_work_run {
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(tctx %p, count %u, loops %u)\n", args->tctx, args->count, args->loops);
}

/* ================================================ */


tracepoint:io_uring:io_uring_task_add {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, req %p, user_data 0x%llx, opcode %d, mask %x)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->opcode,
           args->mask);
}

tracepoint:io_uring:io_uring_submit_sqe {
    @rings[args->ctx, probe] = count();
     printf("[%lld] (%s) %s", nsecs, comm, probe);
     printf("(ring %p, req %p, user_data 0x%llx, opcode %d, flags 0x%x, non block %d, sq_thread %d)\n",
            args->ctx,
            args->req,
            args->user_data,
            args->opcode,
            args->flags,
            args->force_nonblock,
            args->sq_thread)
}

tracepoint:io_uring:io_uring_short_write {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, fpos %lld, wanted %lld, got %lld)\n", args->ctx, args->fpos, args->wanted, args->got)
}


tracepoint:io_uring:io_uring_req_failed {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, req %p, user_data 0x%llx, opcode %d, flags 0x%x, prio=%d, off=%llu, addr=%llu, len=%u, rw_flags=0x%x, buf_index=%d, personality=%d, file_index=%d, pad=0x%llx, addr3=%llx, error=%d)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->opcode,
           args->flags,
           args->ioprio,
           (uint64) args->off,
           (uint64) args->addr,
           args->len,
           args->op_flags,
           args->buf_index,
           args->personality,
           args->file_index,
           (uint64) args->pad1,
           (uint64) args->addr3,
           args->error)
}

tracepoint:io_uring:io_uring_queue_async_work {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, request %p, user_data 0x%llx, opcode %d, flags 0x%x, %s queue, work %p)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->opcode,
           args->flags,
           args->rw ? "hashed" : "normal",
           args->work)
}


tracepoint:io_uring:io_uring_poll_arm {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, req %p, user_data 0x%llx, opcode %d, mask 0x%x, events 0x%x)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->opcode,
           args->mask,
           args->events)
}


tracepoint:io_uring:io_uring_local_work_run {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, count %d, loops %u)\n", args->ctx, args->count, args->loops)
}


tracepoint:io_uring:io_uring_link {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, request %p linked after %p)\n", args->ctx, args->req, args->target_req)
}


tracepoint:io_uring:io_uring_file_get {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, req %p, user_data 0x%llx, fd %d)\n", args->ctx, args->req, args->user_data, args->fd)
}


tracepoint:io_uring:io_uring_fail_link {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, request %p, user_data 0x%llx, opcode %d, link %p)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->opcode,
           args->link)
}


tracepoint:io_uring:io_uring_defer {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, request %p, user_data 0x%llx, opcode %d)\n",
           args->ctx,
           args->req,
           args->data,
           args->opcode)
}

tracepoint:io_uring:io_uring_cqring_wait {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, min_events %d)\n", args->ctx, args->min_events)
}


tracepoint:io_uring:io_uring_cqe_overflow {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, user_data 0x%llx, res %d, cflags 0x%x, overflow_cqe %p)\n",
           args->ctx,
           args->user_data,
           args->res,
           args->cflags,
           args->ocqe)
}

tracepoint:io_uring:io_uring_complete {
    @rings[args->ctx, probe] = count();
    printf("[%lld] (%s) %s", nsecs, comm, probe);
    printf("(ring %p, req %p, user_data 0x%llx, result %d, cflags 0x%x extra1 %llu extra2 %llu)\n",
           args->ctx,
           args->req,
           args->user_data,
           args->res,
           args->cflags,
           (uint64) args->extra1,
           (uint64) args->extra2)
}
