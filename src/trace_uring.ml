(* open Ocaml_libbpf *)
(* module F = Libbpf.Functions *)
(* module T = Libbpf.Types *)
(* module W = Fxt.Write *)
(* module B = Bindings *)

(* (\* Describe event handler *\) *)
(* let handle_event (rw : Ring_writer.t) _ctx data _size = *)
(*   let open Ctypes in *)
(*   let module Event = B.Struct_event in *)
(*   let event = !@(from_voidp Event.t data) in *)
(*   let pid = getf event Event.pid |> Int64.of_int in *)
(*   let tid = getf event Event.tid |> Int64.of_int in *)
(*   let comm = getf event Event.comm |> B.char_array_as_string in *)
(*   let ts = getf event Event.ts |> Unsigned.UInt64.to_int64 in *)
(*   (match getf event Event.ty with *)
(*   | B.SYS_ENTER_IO_URING_ENTER -> *)
(*       W.duration_begin rw.fxt ~name:"IO_URING_ENTER" *)
(*         ~thread:W.{ pid; tid } *)
(*         ~category:"syscalls" ~ts *)
(*   | B.SYS_EXIT_IO_URING_ENTER -> *)
(*       W.duration_end rw.fxt ~name:"IO_URING_ENTER" *)
(*         ~thread:W.{ pid; tid } *)
(*         ~category:"syscalls" ~ts *)
(*   (\* Tracepoints *\) *)
(*   | B.IO_URING_CREATE -> *)
(*       let t = getf u B.io_uring_create |> B.Struct_io_uring_create.unload in *)
(*       Ring_writer.create_event rw ~pid ~ring_fd:t.fd ~ring_ctx:t.ctx_ptr ~tid *)
(*         ~name:"io_uring_create" ~comm ~ts *)
(*   | B.IO_URING_SUBMIT_SQE -> *)
(*       let t = *)
(*         getf u B.io_uring_submit_sqe |> B.Struct_io_uring_submit_sqe.unload *)
(*       in *)
(*       let req_ptr = t.req_ptr |> Int64.of_nativeint in *)
(*       Ring_writer.submission_event rw ~pid ~ring_ctx:t.ctx_ptr ~tid *)
(*         ~name:"io_uring_submit" ~comm ~ts ~correlation_id:req_ptr *)
(*         ~args: *)
(*           [ *)
(*             ("ring_ctx", `Pointer (Int64.of_nativeint t.ctx_ptr)); *)
(*             ("req", `Pointer req_ptr); *)
(*             ("op_str", `String t.op_str); *)
(*             ("opcode", `Int64 (Int64.of_int t.opcode)); *)
(*             ("flags", `Int64 (Int64.of_int t.flags)); *)
(*             ("force_nonblock", `String (Bool.to_string t.force_nonblock)); *)
(*             ("sq_thread", `String (Bool.to_string t.sq_thread)); *)
(*           ] *)
(*   | B.IO_URING_QUEUE_ASYNC_WORK -> *)
(*       let t = *)
(*         getf u B.io_uring_queue_async_work *)
(*         |> B.Struct_io_uring_queue_async_work.unload *)
(*       in *)
(*       let req_ptr = t.req_ptr |> Int64.of_nativeint in *)
(*       Ring_writer.async_work_event rw ~pid ~ring_ctx:t.ctx_ptr ~tid *)
(*         ~name:"io_uring_queue_async_work" ~comm ~ts ~correlation_id:req_ptr *)
(*         ~args: *)
(*           [ *)
(*             ("ring_ctx", `Pointer (Int64.of_nativeint t.ctx_ptr)); *)
(*             ("req", `Pointer req_ptr); *)
(*             ("opcode", `Int64 (Int64.of_int t.opcode)); *)
(*             ("flags", `Int64 (Int64.of_int32 t.flags)); *)
(*             ("work_ptr", `Pointer t.work_ptr); *)
(*             ("op_str", `String t.op_str); *)
(*           ] *)
(*   | B.IO_URING_COMPLETE -> *)
(*       let t = getf u B.io_uring_complete |> B.Struct_io_uring_complete.unload in *)
(*       let req_ptr = t.req_ptr |> Int64.of_nativeint in *)
(*       Ring_writer.completion_event rw ~pid ~ring_ctx:t.ctx_ptr ~tid *)
(*         ~name:"io_uring_complete" ~comm ~ts ~correlation_id:req_ptr *)
(*         ~args: *)
(*           [ *)
(*             ("ring_ctx", `Pointer (Int64.of_nativeint t.ctx_ptr)); *)
(*             ("req", `Pointer req_ptr); *)
(*             ("res", `Int64 (Int64.of_int t.res)); *)
(*             ("cflags", `Int64 (Int64.of_int t.cflags)); *)
(*           ] *)
(*   | B.IO_URING_CQRING_WAIT -> *)
(*       let t = *)
(*         getf u B.io_uring_cqring_wait |> B.Struct_io_uring_cqring_wait.unload *)
(*       in *)
(*       W.instant_event rw.fxt ~name:"io_uring_cqring_wait" *)
(*         ~thread:W.{ pid; tid } *)
(*         ~category:"uring" ~ts *)
(*         ~args: *)
(*           [ *)
(*             ("ring_ctx", `Pointer (Int64.of_nativeint t.ctx_ptr)); *)
(*             ("min_events", `Int64 (Int64.of_int t.min_events)); *)
(*           ] *)
(*   | _ -> ()); *)
(*   0 *)
